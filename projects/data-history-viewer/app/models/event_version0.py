# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class EventVersion0(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, arrivaltimestamp: float=None, createdtimestamp: float=None, customerid: int=None, data: str=None, servicename: str=None, service: str=None):
        """
        EventVersion0 - a model defined in Swagger

        :param arrivaltimestamp: The arrivaltimestamp of this EventVersion0.
        :type arrivaltimestamp: float
        :param createdtimestamp: The createdtimestamp of this EventVersion0.
        :type createdtimestamp: float
        :param customerid: The customerid of this EventVersion0.
        :type customerid: int
        :param data: The data of this EventVersion0.
        :type data: str
        :param servicename: The servicename of this EventVersion0.
        :type servicename: str
        :param service: The service of this EventVersion0.
        :type service: str
        """
        self.swagger_types = {
            'arrivaltimestamp': float,
            'createdtimestamp': float,
            'customerid': int,
            'data': str,
            'servicename': str,
            'service': str
        }

        self.attribute_map = {
            'arrivaltimestamp': 'arrivaltimestamp',
            'createdtimestamp': 'createdtimestamp',
            'customerid': 'customerid',
            'data': 'data',
            'servicename': 'servicename',
            'service': 'service'
        }

        self._arrivaltimestamp = arrivaltimestamp
        self._createdtimestamp = createdtimestamp
        self._customerid = customerid
        self._data = data
        self._servicename = servicename
        self._service = service

    @classmethod
    def from_dict(cls, dikt) -> 'EventVersion0':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventVersion0 of this EventVersion0.
        :rtype: EventVersion0
        """
        return deserialize_model(dikt, cls)

    @property
    def arrivaltimestamp(self) -> float:
        """
        Gets the arrivaltimestamp of this EventVersion0.

        :return: The arrivaltimestamp of this EventVersion0.
        :rtype: float
        """
        return self._arrivaltimestamp

    @arrivaltimestamp.setter
    def arrivaltimestamp(self, arrivaltimestamp: float):
        """
        Sets the arrivaltimestamp of this EventVersion0.

        :param arrivaltimestamp: The arrivaltimestamp of this EventVersion0.
        :type arrivaltimestamp: float
        """
        if arrivaltimestamp is None:
            raise ValueError("Invalid value for `arrivaltimestamp`, must not be `None`")

        self._arrivaltimestamp = arrivaltimestamp

    @property
    def createdtimestamp(self) -> float:
        """
        Gets the createdtimestamp of this EventVersion0.

        :return: The createdtimestamp of this EventVersion0.
        :rtype: float
        """
        return self._createdtimestamp

    @createdtimestamp.setter
    def createdtimestamp(self, createdtimestamp: float):
        """
        Sets the createdtimestamp of this EventVersion0.

        :param createdtimestamp: The createdtimestamp of this EventVersion0.
        :type createdtimestamp: float
        """
        if createdtimestamp is None:
            raise ValueError("Invalid value for `createdtimestamp`, must not be `None`")

        self._createdtimestamp = createdtimestamp

    @property
    def customerid(self) -> int:
        """
        Gets the customerid of this EventVersion0.

        :return: The customerid of this EventVersion0.
        :rtype: int
        """
        return self._customerid

    @customerid.setter
    def customerid(self, customerid: int):
        """
        Sets the customerid of this EventVersion0.

        :param customerid: The customerid of this EventVersion0.
        :type customerid: int
        """
        if customerid is None:
            raise ValueError("Invalid value for `customerid`, must not be `None`")

        self._customerid = customerid

    @property
    def data(self) -> str:
        """
        Gets the data of this EventVersion0.

        :return: The data of this EventVersion0.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """
        Sets the data of this EventVersion0.

        :param data: The data of this EventVersion0.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def servicename(self) -> str:
        """
        Gets the servicename of this EventVersion0.

        :return: The servicename of this EventVersion0.
        :rtype: str
        """
        return self._servicename

    @servicename.setter
    def servicename(self, servicename: str):
        """
        Sets the servicename of this EventVersion0.

        :param servicename: The servicename of this EventVersion0.
        :type servicename: str
        """
        if servicename is None:
            raise ValueError("Invalid value for `servicename`, must not be `None`")

        self._servicename = servicename

    @property
    def service(self) -> str:
        """
        Gets the service of this EventVersion0.

        :return: The service of this EventVersion0.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service: str):
        """
        Sets the service of this EventVersion0.

        :param service: The service of this EventVersion0.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

