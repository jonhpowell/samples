# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class QueryConfiguration(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sql_query: str=None, retention_minutes: int=None):
        """
        QueryConfiguration - a model defined in Swagger

        :param sql_query: The sql_query of this QueryConfiguration.
        :type sql_query: str
        :param retention_minutes: The retention_minutes of this QueryConfiguration.
        :type retention_minutes: int
        """
        self.swagger_types = {
            'sql_query': str,
            'retention_minutes': int
        }

        self.attribute_map = {
            'sql_query': 'sql_query',
            'retention_minutes': 'retention_minutes'
        }

        self._sql_query = sql_query
        self._retention_minutes = retention_minutes

    @classmethod
    def from_dict(cls, dikt) -> 'QueryConfiguration':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryConfiguration of this QueryConfiguration.
        :rtype: QueryConfiguration
        """
        return deserialize_model(dikt, cls)

    @property
    def sql_query(self) -> str:
        """
        Gets the sql_query of this QueryConfiguration.
        Athena SQL using EventVersion0 column names

        :return: The sql_query of this QueryConfiguration.
        :rtype: str
        """
        return self._sql_query

    @sql_query.setter
    def sql_query(self, sql_query: str):
        """
        Sets the sql_query of this QueryConfiguration.
        Athena SQL using EventVersion0 column names

        :param sql_query: The sql_query of this QueryConfiguration.
        :type sql_query: str
        """

        self._sql_query = sql_query

    @property
    def retention_minutes(self) -> int:
        """
        Gets the retention_minutes of this QueryConfiguration.
        how long to retain query results in minutes

        :return: The retention_minutes of this QueryConfiguration.
        :rtype: int
        """
        return self._retention_minutes

    @retention_minutes.setter
    def retention_minutes(self, retention_minutes: int):
        """
        Sets the retention_minutes of this QueryConfiguration.
        how long to retain query results in minutes

        :param retention_minutes: The retention_minutes of this QueryConfiguration.
        :type retention_minutes: int
        """
        if retention_minutes is not None and retention_minutes > 525600:
            raise ValueError("Invalid value for `retention_minutes`, must be a value less than or equal to `525600`")
        if retention_minutes is not None and retention_minutes < 1:
            raise ValueError("Invalid value for `retention_minutes`, must be a value greater than or equal to `1`")

        self._retention_minutes = retention_minutes

