# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class QueryNextRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, query_id: str=None, next_token: str=None, results_per_request: int=None):
        """
        QueryNextRequest - a model defined in Swagger

        :param query_id: The query_id of this QueryNextRequest.
        :type query_id: str
        :param next_token: The next_token of this QueryNextRequest.
        :type next_token: str
        :param results_per_request: The results_per_request of this QueryNextRequest.
        :type results_per_request: int
        """
        self.swagger_types = {
            'query_id': str,
            'next_token': str,
            'results_per_request': int
        }

        self.attribute_map = {
            'query_id': 'query_id',
            'next_token': 'next_token',
            'results_per_request': 'results_per_request'
        }

        self._query_id = query_id
        self._next_token = next_token
        self._results_per_request = results_per_request

    @classmethod
    def from_dict(cls, dikt) -> 'QueryNextRequest':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryNextRequest of this QueryNextRequest.
        :rtype: QueryNextRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def query_id(self) -> str:
        """
        Gets the query_id of this QueryNextRequest.
        Athena SQL job id specific to one query returned on initial query submission

        :return: The query_id of this QueryNextRequest.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id: str):
        """
        Sets the query_id of this QueryNextRequest.
        Athena SQL job id specific to one query returned on initial query submission

        :param query_id: The query_id of this QueryNextRequest.
        :type query_id: str
        """

        self._query_id = query_id

    @property
    def next_token(self) -> str:
        """
        Gets the next_token of this QueryNextRequest.
        Token returned on previous call used for demarcating the result set chunk

        :return: The next_token of this QueryNextRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token: str):
        """
        Sets the next_token of this QueryNextRequest.
        Token returned on previous call used for demarcating the result set chunk

        :param next_token: The next_token of this QueryNextRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def results_per_request(self) -> int:
        """
        Gets the results_per_request of this QueryNextRequest.
        how many result set rows per request

        :return: The results_per_request of this QueryNextRequest.
        :rtype: int
        """
        return self._results_per_request

    @results_per_request.setter
    def results_per_request(self, results_per_request: int):
        """
        Sets the results_per_request of this QueryNextRequest.
        how many result set rows per request

        :param results_per_request: The results_per_request of this QueryNextRequest.
        :type results_per_request: int
        """
        if results_per_request is not None and results_per_request > 1000:
            raise ValueError("Invalid value for `results_per_request`, must be a value less than or equal to `1000`")
        if results_per_request is not None and results_per_request < 1:
            raise ValueError("Invalid value for `results_per_request`, must be a value greater than or equal to `1`")

        self._results_per_request = results_per_request

